<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Shell及Linux常用命令</title>
      <link href="/2024/03/19/shell/"/>
      <url>/2024/03/19/shell/</url>
      
        <content type="html"><![CDATA[<p>Shell基础知识及Linux常用命令</p><a id="more"></a><h1 id="Shell"><a href="#Shell" class="headerlink" title="Shell"></a>Shell</h1><h2 id="1-变量"><a href="#1-变量" class="headerlink" title="1 变量"></a>1 变量</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a = "hello word"</span><br><span class="line">echo $a</span><br></pre></td></tr></table></figure><h2 id="2-字符串"><a href="#2-字符串" class="headerlink" title="2 字符串"></a>2 字符串</h2><h3 id="2-1-字符串拼接"><a href="#2-1-字符串拼接" class="headerlink" title="2.1 字符串拼接"></a>2.1 字符串拼接</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = "hello"</span><br><span class="line">b = "word"</span><br><span class="line">echo $a$b</span><br></pre></td></tr></table></figure><h3 id="2-2-字符串长度"><a href="#2-2-字符串长度" class="headerlink" title="2.2 字符串长度"></a>2.2 字符串长度</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a = "hello"</span><br><span class="line">echo $&#123;#a&#125;</span><br></pre></td></tr></table></figure><h3 id="2-3-字符串提取"><a href="#2-3-字符串提取" class="headerlink" title="2.3 字符串提取"></a>2.3 字符串提取</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a = "hello"</span><br><span class="line">echo $&#123;a:1:3&#125;</span><br></pre></td></tr></table></figure><h2 id="3-数组"><a href="#3-数组" class="headerlink" title="3 数组"></a>3 数组</h2><p>数组用括号表示，然后元素用空格分开</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a = (A B "C" D)</span><br></pre></td></tr></table></figure><h3 id="3-1-读取索引数组"><a href="#3-1-读取索引数组" class="headerlink" title="3.1 读取索引数组"></a>3.1 读取索引数组</h3><p>与切片类似</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a = (A B "C" D)</span><br><span class="line">echo $&#123;a[0]&#125;</span><br></pre></td></tr></table></figure><h3 id="3-2-获取数组中所有元素"><a href="#3-2-获取数组中所有元素" class="headerlink" title="3.2 获取数组中所有元素"></a>3.2 获取数组中所有元素</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = (A B "C" D)</span><br><span class="line">echo $&#123;a[@]&#125;</span><br><span class="line">echo $&#123;a[*]&#125;</span><br></pre></td></tr></table></figure><h3 id="3-3-获取数组长度"><a href="#3-3-获取数组长度" class="headerlink" title="3.3 获取数组长度"></a>3.3 获取数组长度</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a = (A B "C" D)</span><br><span class="line">echo $&#123;#a[@]&#125;</span><br></pre></td></tr></table></figure><h2 id="4-test命令"><a href="#4-test命令" class="headerlink" title="4 test命令"></a>4 test命令</h2><h3 id="4-1-数值测试"><a href="#4-1-数值测试" class="headerlink" title="4.1 数值测试"></a>4.1 数值测试</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">-eq 等于则为真</span><br><span class="line">-ne 不等于则为真</span><br><span class="line">-gt 大于则为真</span><br><span class="line">-ge 大于等于则为真</span><br><span class="line">-lt 小于则为真</span><br><span class="line">-le 小于等于则为真</span><br></pre></td></tr></table></figure><h3 id="4-2-字符串测试"><a href="#4-2-字符串测试" class="headerlink" title="4.2 字符串测试"></a>4.2 字符串测试</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">=   等于则为真</span><br><span class="line">!=  不相等则为真</span><br><span class="line">-z 字符串  字符串的长度为零则为真</span><br><span class="line">-n 字符串  字符串的长度不为零则为真</span><br></pre></td></tr></table></figure><h3 id="4-3-文件测试"><a href="#4-3-文件测试" class="headerlink" title="4.3 文件测试"></a>4.3 文件测试</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">-e 文件名  如果文件存在则为真</span><br><span class="line">-r 文件名  如果文件存在且可读则为真</span><br><span class="line">-w 文件名  如果文件存在且可写则为真</span><br><span class="line">-x 文件名  如果文件存在且可执行则为真</span><br><span class="line">-s 文件名  如果文件存在且至少有一个字符则为真</span><br><span class="line">-d 文件名  如果文件存在且为目录则为真</span><br><span class="line">-f 文件名  如果文件存在且为普通文件则为真</span><br><span class="line">-c 文件名  如果文件存在且为字符型特殊文件则为真</span><br><span class="line">-b 文件名  如果文件存在且为块特殊文件则为真</span><br></pre></td></tr></table></figure><h2 id="5-控制流"><a href="#5-控制流" class="headerlink" title="5 控制流"></a>5 控制流</h2><h3 id="5-1-if判断流"><a href="#5-1-if判断流" class="headerlink" title="5.1 if判断流"></a>5.1 if判断流</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">if condition</span><br><span class="line">then</span><br><span class="line">    command1 </span><br><span class="line">    command2</span><br><span class="line">    ...</span><br><span class="line">    commandN </span><br><span class="line">fi</span><br></pre></td></tr></table></figure><h3 id="5-2-for循环"><a href="#5-2-for循环" class="headerlink" title="5.2 for循环"></a>5.2 for循环</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">for var in item1 item2 ... itemN</span><br><span class="line">do</span><br><span class="line">    command1</span><br><span class="line">    command2</span><br><span class="line">    ...</span><br><span class="line">    commandN</span><br><span class="line">done</span><br></pre></td></tr></table></figure><h3 id="5-3-while循环"><a href="#5-3-while循环" class="headerlink" title="5.3 while循环"></a>5.3 while循环</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">while condition</span><br><span class="line">do</span><br><span class="line">    command</span><br><span class="line">done</span><br></pre></td></tr></table></figure><h3 id="5-4-until循环"><a href="#5-4-until循环" class="headerlink" title="5.4 until循环"></a>5.4 until循环</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">until condition</span><br><span class="line">do</span><br><span class="line">    command</span><br><span class="line">done</span><br></pre></td></tr></table></figure><h3 id="5-5-case"><a href="#5-5-case" class="headerlink" title="5.5 case"></a>5.5 case</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">case 值 in</span><br><span class="line">模式1)</span><br><span class="line">    command1</span><br><span class="line">    command2</span><br><span class="line">    ...</span><br><span class="line">    commandN</span><br><span class="line">    ;;</span><br><span class="line">模式2）</span><br><span class="line">    command1</span><br><span class="line">    command2</span><br><span class="line">    ...</span><br><span class="line">    commandN</span><br><span class="line">    ;;</span><br><span class="line">esac</span><br></pre></td></tr></table></figure><h3 id="5-6-跳出循环"><a href="#5-6-跳出循环" class="headerlink" title="5.6 跳出循环"></a>5.6 跳出循环</h3><p>break跳出循环</p><h1 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h1><p>复制目录</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp -r</span><br></pre></td></tr></table></figure><p>级联创建目录</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p</span><br></pre></td></tr></table></figure><p>剪切及重命名</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mv</span><br></pre></td></tr></table></figure><p>获取当前路径</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">pwd</span></span><br></pre></td></tr></table></figure><p>获取目录下内容</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls</span><br></pre></td></tr></table></figure><p>删除目录</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm -rf</span><br></pre></td></tr></table></figure><p>查看实时日志</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tail -f</span><br></pre></td></tr></table></figure><p>查看进程信息</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps -ef | grep java</span><br></pre></td></tr></table></figure><p>杀掉进程</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">kill</span></span><br></pre></td></tr></table></figure><p>打包并压缩文件</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -czvf</span><br></pre></td></tr></table></figure><p>解压文件</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -xzvf</span><br></pre></td></tr></table></figure><p>查看系统运行状态</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">top</span><br></pre></td></tr></table></figure><p>查看系统网卡信息</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ifconfig</span><br><span class="line">ipaddr</span><br></pre></td></tr></table></figure><p>查找端口</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -anp | grep 80</span><br></pre></td></tr></table></figure><p>启动jar包</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nohup java -jar test.jar &amp;</span><br></pre></td></tr></table></figure><p>查看磁盘信息</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df -h</span><br></pre></td></tr></table></figure><p>查看内存信息</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">free -h</span><br></pre></td></tr></table></figure><p>查找文件</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">find / -name *.conf</span><br><span class="line">find / -name <span class="string">"*.mp4"</span> -<span class="built_in">exec</span> rm -rf &#123;&#125;\;</span><br></pre></td></tr></table></figure><p>过滤文本</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep root /etc/passwd</span><br></pre></td></tr></table></figure><p>修改文本</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed</span><br></pre></td></tr></table></figure><p>处理文本</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>加解密封装</title>
      <link href="/2024/03/18/crypt-package/"/>
      <url>/2024/03/18/crypt-package/</url>
      
        <content type="html"><![CDATA[<p>加密、解密封装。包含AES加解密和MD5加密</p><a id="more"></a><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES <span class="keyword">as</span> _AES</span><br><span class="line"><span class="keyword">from</span> cryptography.hazmat.primitives <span class="keyword">import</span> padding</span><br><span class="line"></span><br><span class="line"><span class="comment"># 密钥</span></span><br><span class="line">AES_KEY = base64.b64decode(<span class="string">"bG9uZ2dlPTY2NmxvdmUhIQ=="</span>).decode()  <span class="comment"># 请修改 一定是 16位的字符串</span></span><br><span class="line"><span class="comment"># 偏移量</span></span><br><span class="line">AES_IV = base64.b64decode(<span class="string">"bG9uZ2dlPTg4OGxvdmUhIQ=="</span>).decode()</span><br><span class="line"><span class="comment"># 加盐</span></span><br><span class="line">AES_SALT = base64.b64decode(<span class="string">"bG9uZ2dlPTk5OWxvdmUhIQ=="</span>).decode()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 处理AES加密和解密,(AES+CBC+pkcs7padding)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AESCrypt</span><span class="params">()</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.IV = AES_IV.encode(<span class="string">"utf-8"</span>)</span><br><span class="line">        self.KEY = AES_KEY.encode(<span class="string">"utf-8"</span>)</span><br><span class="line">        self.SALT = AES_SALT.encode(<span class="string">"utf-8"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">pkcs7_padding</span><span class="params">(self, data, block_size=<span class="number">128</span>)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        密码必须满足8的倍数所以需要补位，PKCS7Padding用'\n'补位</span></span><br><span class="line"><span class="string">        :param data:</span></span><br><span class="line"><span class="string">        :param block_size:</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> isinstance(data, bytes):</span><br><span class="line">            data = data.encode(<span class="string">'utf-8'</span>)</span><br><span class="line">        padder = padding.PKCS7(block_size).padder()</span><br><span class="line">        <span class="keyword">return</span> padder.update(data) + padder.finalize()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">generateKey</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        key加盐</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">return</span> hashlib.pbkdf2_hmac(hash_name=<span class="string">"sha1"</span>, password=self.KEY, salt=self.SALT, iterations=<span class="number">1</span>,</span><br><span class="line">                                   dklen=<span class="number">16</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">aes_encrypt</span><span class="params">(self, password: str)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        aes加密</span></span><br><span class="line"><span class="string">        :param password:</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        key = self.generateKey()</span><br><span class="line">        padded_data = self.pkcs7_padding(password)</span><br><span class="line">        cipher = _AES.new(key, _AES.MODE_CBC, self.IV)</span><br><span class="line">        <span class="keyword">return</span> base64.b64encode(cipher.encrypt(padded_data)).decode()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">aes_decrypt</span><span class="params">(self, content: str)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        aes解密</span></span><br><span class="line"><span class="string">        :param content:</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        key = self.generateKey()</span><br><span class="line">        cipher = _AES.new(key, _AES.MODE_CBC, self.IV)</span><br><span class="line">        content = base64.b64decode(content)</span><br><span class="line">        <span class="keyword">return</span> (cipher.decrypt(content).decode(<span class="string">'utf-8'</span>)).replace(<span class="string">'\n'</span>, <span class="string">''</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 处理md5加密，未加盐</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MD5Crypt</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">md5_encrypt</span><span class="params">(self, content)</span>:</span></span><br><span class="line">        <span class="comment"># 创建对象</span></span><br><span class="line">        md = hashlib.md5(content.encode(<span class="string">'utf-8'</span>))</span><br><span class="line">        <span class="keyword">return</span> md.hexdigest()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    ace = AESCrypt()</span><br><span class="line">    md5 = MD5Crypt()</span><br><span class="line">    enc_data = ace.aes_encrypt(<span class="string">"123456"</span>)</span><br><span class="line">    print(<span class="string">"加密:&gt;&gt;&gt;&gt;&gt;&#123;&#125;"</span>.format(enc_data))</span><br><span class="line">    dec_data = ace.aes_decrypt(enc_data)</span><br><span class="line">    print(<span class="string">"解码:&gt;&gt;&gt;&gt;&gt;&#123;&#125;"</span>.format(dec_data))</span><br><span class="line">    c = md5.md5_encrypt(<span class="string">"123456"</span>)</span><br><span class="line">    print(c)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>接口请求的封装</title>
      <link href="/2024/03/18/request-package/"/>
      <url>/2024/03/18/request-package/</url>
      
        <content type="html"><![CDATA[<p>进行请求接口的封装</p><a id="more"></a><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">APIClient</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, base_url)</span>:</span></span><br><span class="line">        <span class="comment"># 设置基础访问地址</span></span><br><span class="line">        self.base_url = base_url</span><br><span class="line">        <span class="comment"># 保持会话</span></span><br><span class="line">        self.session = requests.session()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, url, **kwargs)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.session.request(<span class="string">'GET'</span>, self.base_url+url, **kwargs)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span><span class="params">(self, url, data=None, json=None, **kwargs)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.session.request(<span class="string">'POST'</span>, self.base_url+url, data, json, **kwargs)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">put</span><span class="params">(self, url, data=None, **kwargs)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.session.request(<span class="string">'PUT'</span>, self.base_url+url, data, **kwargs)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(self, url, **kwargs)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.session.request(<span class="string">'DELETE'</span>, self.base_url+url, **kwargs)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>pytest基础知识</title>
      <link href="/2024/03/18/pytest/"/>
      <url>/2024/03/18/pytest/</url>
      
        <content type="html"><![CDATA[<p>pytest基础知识</p><a id="more"></a><h2 id="1-用例设计"><a href="#1-用例设计" class="headerlink" title="1 用例设计"></a>1 用例设计</h2><p>文件名和函数命名规范：</p><ul><li>pytest会自动收集以<code>test_</code>开头或者<code>_test</code>结尾的python文件作为测试文件</li><li>测试文件中的测试函数或方法也需要以<code>test_</code>开头</li><li>测试类需要以<code>Test</code>开头，且测试方法也需要以<code>test_</code>开头。</li><li>测试类不包含<code>__init__</code>方法</li></ul><h2 id="2-用例执行"><a href="#2-用例执行" class="headerlink" title="2 用例执行"></a>2 用例执行</h2><p>用例执行的方式主要有以下几种：</p><h3 id="2-1-主函数模式"><a href="#2-1-主函数模式" class="headerlink" title="2.1 主函数模式"></a>2.1 主函数模式</h3><ul><li>运行所有测试用例：<code>pytest.main()</code></li><li>运行执行模块的测试用例：<code>pytest.main([&#39;-vs&#39;,&#39;模块名.py&#39;])</code></li><li>运行指定目录的测试用例：<code>pytest.main([&#39;-vs&#39;,&#39;./目录名&#39;])</code></li><li>通过nodeID指定用例运行：<code>pytest.main([&#39;-vs&#39;,&#39;模块名.py::类名::方法名&#39;])</code></li></ul><h3 id="2-2-命令行模式"><a href="#2-2-命令行模式" class="headerlink" title="2.2 命令行模式"></a>2.2 命令行模式</h3><ul><li>运行所有测试用例：在命令行直接输入<code>pytest</code></li><li>运行指定模块的测试用例：<code>pytest -vs 模块名.py</code></li><li>运行指定目录的测试用例：进入到对应目录，然后执行<code>pytest</code>，或者在上级目录执行<code>pytest 目录名称/</code></li><li>运行模块模块内的某个测试方法或测试类：<code>pytest 模块名.py::函数名或类名</code></li></ul><h3 id="2-3-通过标记执行"><a href="#2-3-通过标记执行" class="headerlink" title="2.3 通过标记执行"></a>2.3 通过标记执行</h3><p>使用<code>pytest -m 标记名</code>来执行具有特定标记的测试用例或测试类。适用于大量测试用例中快速筛选出需要执行的用例。</p><h3 id="2-4-参数化执行"><a href="#2-4-参数化执行" class="headerlink" title="2.4 参数化执行"></a>2.4 参数化执行</h3><p>使用参数化装饰器<code>@pytest.mark.parametrize</code>来对测试用例进行参数化，从而执行具有不同输入参数的测试。</p><h2 id="3-用例跳过"><a href="#3-用例跳过" class="headerlink" title="3 用例跳过"></a>3 用例跳过</h2><p>跳过测试用例主要有以下几种：</p><h3 id="3-1-无条件跳过"><a href="#3-1-无条件跳过" class="headerlink" title="3.1 无条件跳过"></a>3.1 无条件跳过</h3><ul><li>使用装饰器<code>@pytest.mark.skip(reason=&quot;跳过原因&quot;)</code>来标记整个测试方法、类或者模块，参数可选</li><li>在测试方法内部，如果满足某个条件不想继续执行测试，可以使用<code>pytest.skip(&quot;unsupported configuration&quot;)</code>来跳过当前的测试</li></ul><h3 id="3-2-有条件跳过"><a href="#3-2-有条件跳过" class="headerlink" title="3.2 有条件跳过"></a>3.2 有条件跳过</h3><ul><li>使用装饰器<code>@pytest.mark.skipif(condition,reason=&quot;跳过原因&quot;)</code>，其中的条件是一个布尔表达式，当为<code>True</code>时会跳过，原因参数可选</li></ul><h3 id="3-3-跳过整个模块"><a href="#3-3-跳过整个模块" class="headerlink" title="3.3 跳过整个模块"></a>3.3 跳过整个模块</h3><ul><li>设置<code>pytestmark=pytest.mark.skip(&quot;跳过模块中所有测试&quot;)</code>来无条件跳过模块中的所有测试</li><li>同样，使用<code>pytestmark=pytest.mark.skipif(condition)</code>根据条件跳过整个模块</li></ul><h2 id="4-用例执行顺序"><a href="#4-用例执行顺序" class="headerlink" title="4 用例执行顺序"></a>4 用例执行顺序</h2><h3 id="4-1-使用pytest-ordering插件"><a href="#4-1-使用pytest-ordering插件" class="headerlink" title="4.1 使用pytest_ordering插件"></a>4.1 使用<code>pytest_ordering</code>插件</h3><ul><li>通过<code>pip install pytest_ordering</code>命令进行安装</li><li>使用<code>@pytest.mark.run(order=x)</code>装饰器来控制测试用例的执行顺序。这里的<code>x</code>是整数，数字越小越先执行，如果同时存在正数和负数，则正数优先级高于负数。即先正后负，先小后大。</li></ul><h3 id="4-2-规范测试用例命名"><a href="#4-2-规范测试用例命名" class="headerlink" title="4.2 规范测试用例命名"></a>4.2 规范测试用例命名</h3><ul><li>pytest模块会根据测试用例的名称按照ASCII码顺序进行自动排序</li></ul><h2 id="5-测试用例预期失败标记"><a href="#5-测试用例预期失败标记" class="headerlink" title="5 测试用例预期失败标记"></a>5 测试用例预期失败标记</h2><h3 id="5-1-使用pytest-mark-xfail装饰器"><a href="#5-1-使用pytest-mark-xfail装饰器" class="headerlink" title="5.1 使用pytest.mark.xfail装饰器"></a>5.1 使用<code>pytest.mark.xfail</code>装饰器</h3><ul><li>当知道某个测试用例由于某些原因会失败时，可以使用装饰器来标记为预期失败，如果确实失败，pytest会将其标记为”xfailed”，而不是普通的失败，如果用例意外通过，会将其标记为”xpass”</li><li>可以使用<code>@pytest.mark.xfail(condition,reason=None)</code>来根据条件判断是否标记测试用例为预期失败。当条件为<code>True</code>时会被标记为预期失败</li></ul><h3 id="5-2-使用pytest-xfail函数"><a href="#5-2-使用pytest-xfail函数" class="headerlink" title="5.2 使用pytest.xfail函数"></a>5.2 使用<code>pytest.xfail</code>函数</h3><ul><li>在测试用例函数内部，可以使用<code>pytest.xfail(reason)</code>来标记测试用例为预期失败。调用此函数后，测试用例的后续代码将不会执行。</li></ul><h2 id="6-测试用例参数化"><a href="#6-测试用例参数化" class="headerlink" title="6 测试用例参数化"></a>6 测试用例参数化</h2><p>可以使用<code>@pytest.mark.parametrize</code>装饰器来对测试用例进行参数化，从而运行多个具有不同输入参数的测试。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pytest  </span><br><span class="line"></span><br><span class="line"><span class="meta">@pytest.mark.parametrize("input, expected, skip_reason", [  </span></span><br><span class="line">    (<span class="number">1</span>, <span class="number">2</span>, <span class="literal">None</span>),  </span><br><span class="line">    (<span class="number">2</span>, <span class="number">5</span>, <span class="string">"this case is known to fail"</span>),  <span class="comment"># 预期失败的实例  </span></span><br><span class="line">    (<span class="number">3</span>, <span class="number">6</span>, <span class="literal">None</span>),  </span><br><span class="line">    pytest.param(<span class="number">4</span>, <span class="number">8</span>, marks=pytest.mark.skip(reason=<span class="string">"skip this case"</span>)),  <span class="comment"># 跳过的实例  </span></span><br><span class="line">])  </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_multiplication</span><span class="params">(input, expected, skip_reason)</span>:</span>  </span><br><span class="line">    <span class="keyword">if</span> skip_reason:  </span><br><span class="line">        pytest.skip(skip_reason)  </span><br><span class="line">    <span class="keyword">if</span> expected == <span class="number">5</span>:  </span><br><span class="line">        pytest.xfail(<span class="string">"Known failure"</span>)  </span><br><span class="line">    <span class="keyword">assert</span> input * <span class="number">2</span> == expected</span><br></pre></td></tr></table></figure><p>在这个例子中，我们添加了一个额外的<code>skip_reason</code>参数到参数化列表中。如果<code>skip_reason</code>有值，我们使用<code>pytest.skip()</code>来跳过该实例。对于预期失败的实例，我们直接在测试函数内部使用<code>pytest.xfail()</code>。注意，你还可以使用<code>pytest.param()</code>与<code>marks</code>参数来直接给特定参数化实例添加标记。</p><h2 id="7-断言"><a href="#7-断言" class="headerlink" title="7 断言"></a>7 断言</h2><p>使用<code>assert</code></p><h2 id="8-捕获异常"><a href="#8-捕获异常" class="headerlink" title="8 捕获异常"></a>8 捕获异常</h2><p>使用<code>pytest.raises()</code>进行异常捕获</p><h2 id="9-固件"><a href="#9-固件" class="headerlink" title="9 固件"></a>9 固件</h2><h3 id="9-1-固件的基本知识"><a href="#9-1-固件的基本知识" class="headerlink" title="9.1 固件的基本知识"></a>9.1 固件的基本知识</h3><p><strong>基本概念</strong></p><p>fixture的主要目的是提供可重用的测试资源，如配置数据、网络连接、数据库连接等。通过在测试用例中使用fixture，你可以确保这些资源在测试执行前被正确设置，并在测试执行后被清理。</p><p><strong>作用域</strong></p><ul><li><p><strong>function</strong>：默认的作用域，每个测试用例都会调用一次fixture。</p></li><li><p><strong>class</strong>：每个测试类调用一次fixture，即使类中的每个方法都调用fixture，也只在第一个用例前执行一次。</p></li><li><p><strong>module</strong>：每个.py文件调用一次fixture，针对一个文件下的所有用例只执行一次。</p></li><li><p><strong>session</strong>：多个文件调用一次fixture，用于多个.py文件一起只调用一次的场景。这需要在目录下新建一个conftest.py文件来定义session级的fixture。</p></li></ul><p><strong>自动适配</strong></p><p>使用<code>@pytest.fixture(autouse=True)</code>进行自动适配，当所有的测试都依赖于它时，可以设置为自动适配</p><h3 id="9-2-固件的使用"><a href="#9-2-固件的使用" class="headerlink" title="9.2 固件的使用"></a>9.2 固件的使用</h3><p><strong>一、设置测试环境</strong></p><p>假设你正在编写针对某个Web API的测试，每次运行测试之前，你都需要确保API服务是可用的，并且具有一些预设的数据。你可以使用fixture来设置这样的测试环境。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests  </span><br><span class="line"><span class="keyword">import</span> pytest  </span><br><span class="line">  </span><br><span class="line"><span class="meta">@pytest.fixture(scope="module")  </span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">api_session</span><span class="params">()</span>:</span>  </span><br><span class="line">    <span class="comment"># 初始化API会话  </span></span><br><span class="line">    session = requests.Session()  </span><br><span class="line">    <span class="comment"># 可能还包括设置会话的headers、cookies等  </span></span><br><span class="line">    <span class="keyword">return</span> session  </span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_get_user</span><span class="params">(api_session)</span>:</span>  </span><br><span class="line">    <span class="comment"># 使用fixture提供的API会话来发起请求  </span></span><br><span class="line">    response = api_session.get(<span class="string">'http://example.com/api/users/1'</span>)  </span><br><span class="line">    <span class="keyword">assert</span> response.status_code == <span class="number">200</span>  </span><br><span class="line">    <span class="comment"># 断言其他响应内容...  </span></span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_create_user</span><span class="params">(api_session)</span>:</span>  </span><br><span class="line">    <span class="comment"># 在另一个测试用例中再次使用fixture  </span></span><br><span class="line">    data = &#123;<span class="string">'name'</span>: <span class="string">'John Doe'</span>, <span class="string">'email'</span>: <span class="string">'john@example.com'</span>&#125;  </span><br><span class="line">    response = api_session.post(<span class="string">'http://example.com/api/users'</span>, json=data)  </span><br><span class="line">    <span class="keyword">assert</span> response.status_code == <span class="number">201</span>  </span><br><span class="line">    <span class="comment"># 断言其他响应内容...</span></span><br></pre></td></tr></table></figure><p>在这个例子中，<code>api_session</code> fixture在模块级别上被定义，意味着它会在模块中的所有测试用例之前被创建一次，并在所有测试用例执行完毕后被销毁。每个测试用例通过接受<code>api_session</code>作为参数来使用它，确保它们使用的是相同的API会话实例。</p><p><strong>二、提供测试数据</strong></p><p>另一个常见的使用场景是为测试用例提供数据。这些数据可以是静态的，也可以是根据某种条件动态生成的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pytest  </span><br><span class="line">  </span><br><span class="line"><span class="meta">@pytest.fixture  </span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_data</span><span class="params">()</span>:</span>  </span><br><span class="line">    <span class="comment"># 返回一些静态的测试数据  </span></span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">'name'</span>: <span class="string">'Test User'</span>, <span class="string">'age'</span>: <span class="number">30</span>&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_user_data</span><span class="params">(test_data)</span>:</span>  </span><br><span class="line">    <span class="comment"># 使用fixture提供的测试数据  </span></span><br><span class="line">    <span class="keyword">assert</span> test_data[<span class="string">'name'</span>] == <span class="string">'Test User'</span>  </span><br><span class="line">    <span class="keyword">assert</span> test_data[<span class="string">'age'</span>] == <span class="number">30</span></span><br></pre></td></tr></table></figure><p>在这个例子中，<code>test_data</code> fixture返回了一个字典，该字典包含了测试用例所需的测试数据。通过将<code>test_data</code>作为参数传递给<code>test_user_data</code>测试用例，你可以确保测试数据在每次运行测试时都是可用的。</p><p><strong>三、清理测试资源</strong></p><p>在测试完成后，有时需要清理创建的资源，如数据库记录、临时文件等。fixture也可以用来执行这些清理操作。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os  </span><br><span class="line"><span class="keyword">import</span> pytest  </span><br><span class="line"><span class="keyword">import</span> tempfile  </span><br><span class="line">  </span><br><span class="line"><span class="meta">@pytest.fixture  </span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">temp_file</span><span class="params">()</span>:</span>  </span><br><span class="line">    <span class="comment"># 创建一个临时文件  </span></span><br><span class="line">    temp = tempfile.NamedTemporaryFile()  </span><br><span class="line">    <span class="keyword">yield</span> temp  </span><br><span class="line">    <span class="comment"># 清理临时文件  </span></span><br><span class="line">    temp.close()  </span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_write_to_temp_file</span><span class="params">(temp_file)</span>:</span>  </span><br><span class="line">    <span class="comment"># 使用fixture提供的临时文件  </span></span><br><span class="line">    temp_file.write(<span class="string">b'Hello, World!'</span>)  </span><br><span class="line">    temp_file.flush()  </span><br><span class="line">    <span class="keyword">assert</span> os.path.getsize(temp_file.name) &gt; <span class="number">0</span></span><br></pre></td></tr></table></figure><p>在这个例子中，<code>temp_file</code> fixture使用了<code>yield</code>语句来定义了一个生成器。在<code>yield</code>之前的代码块中，我们创建了一个临时文件。当测试用例开始执行时，它会从<code>yield</code>语句处继续执行，并且可以使用这个临时文件。当测试用例完成后，控制流会返回到fixture，并执行<code>yield</code>之后的代码块，即关闭临时文件，从而完成清理工作。</p><p><strong>四、fixture的依赖关系</strong></p><p>有时一个fixture可能依赖于另一个fixture。例如，你可能需要一个fixture来初始化数据库连接，而另一个fixture依赖于该连接来准备特定的数据。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pytest  </span><br><span class="line">  </span><br><span class="line"><span class="meta">@pytest.fixture  </span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">db_connection</span><span class="params">()</span>:</span>  </span><br><span class="line">    <span class="comment"># 初始化数据库连接  </span></span><br><span class="line">    <span class="comment"># ...  </span></span><br><span class="line">    <span class="keyword">return</span> connection  </span><br><span class="line">  </span><br><span class="line"><span class="meta">@pytest.fixture  </span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">prepared_data</span><span class="params">(db_connection)</span>:</span>  </span><br><span class="line">    <span class="comment"># 使用db_connection fixture提供的连接来准备数据  </span></span><br><span class="line">    <span class="comment"># ...  </span></span><br><span class="line">    <span class="keyword">return</span> data  </span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_data_integrity</span><span class="params">(prepared_data)</span>:</span>  </span><br><span class="line">    <span class="comment"># 使用prepared_data fixture提供的数据进行测试  </span></span><br><span class="line">    <span class="comment"># ...</span></span><br></pre></td></tr></table></figure><p>在这个例子中，<code>prepared_data</code> fixture依赖于<code>db_connection</code> fixture。pytest会确保<code>db_connection</code> fixture在执行<code>prepared_data</code> fixture之前被创建和初始化。这样，你就可以在<code>prepared_data</code> fixture中使用数据库连接来准备测试所需的数据。</p><h2 id="10-运行参数"><a href="#10-运行参数" class="headerlink" title="10 运行参数"></a>10 运行参数</h2><p>-s:输出调试信息</p><p>-v:显示更详细的信息</p><p>-n=num:启动多线程或分布式运行测试用例。需要安装<code>pytest-xdist</code>插件</p><p>-k=value:用例的nodeid包含value值的测试用例被执行</p><p>-m=标签名：执行被<code>@pytest.mark.标签名</code>标记的用例</p><p>-x:只要有一个用例执行失败就停止当前线程的测试执行</p><p>-maxfail=num:自定义失败次数</p><p>-returns=num:失败用例重跑num次，需要安装<code>pytest-rerunfailures</code></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>个人博客搭建</title>
      <link href="/2022/11/21/blog/"/>
      <url>/2022/11/21/blog/</url>
      
        <content type="html"><![CDATA[<p>Hexo + Github + Window 个人博客搭建步骤记录+优化</p><a id="more"></a><h2 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h2><p>Hexo+GitHub+Window</p><h2 id="二、新建Github仓库"><a href="#二、新建Github仓库" class="headerlink" title="二、新建Github仓库"></a>二、新建Github仓库</h2><p>前置条件：拥有Github账号<br>新建一个与账号名相同的仓库，如仓库名：GitHub账号名.github.io</p><h2 id="三、安装Git"><a href="#三、安装Git" class="headerlink" title="三、安装Git"></a>三、安装Git</h2><p><a href="https://git-scm.com/" target="_blank" rel="noopener">网址</a>，由于官网下载速度较慢，一般都下载不成功，所以选用<a href="https://npm.taobao.org/mirrors/git-for-windows/" target="_blank" rel="noopener">国内镜像下载</a>，下载后默认安装</p><h2 id="五、安装Node-Js"><a href="#五、安装Node-Js" class="headerlink" title="五、安装Node.Js"></a>五、安装Node.Js</h2><p><a href="http://nodejs.cn/download/" target="_blank" rel="noopener">网址</a>，默认安装就行</p><h2 id="六、安装Hexo"><a href="#六、安装Hexo" class="headerlink" title="六、安装Hexo"></a>六、安装Hexo</h2><p>前置条件：安装好Git和Node.Js<br>安装步骤官方说明<a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">网址</a>，这里是在Window下进行安装</p><h3 id="1-安装Hexo到文件夹"><a href="#1-安装Hexo到文件夹" class="headerlink" title="1.安装Hexo到文件夹"></a>1.安装Hexo到文件夹</h3><p>Hexo<a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener">网址</a>，获取快捷安装命令</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-cli -g</span><br></pre></td></tr></table></figure><p>新建文件夹，命名为<code>Github账户名.github.io</code>，点击文件夹，右键<code>Git Bash Here</code>，输入上面命令，接着输入下面命令</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo --save</span><br></pre></td></tr></table></figure><p>然后</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo -v    <span class="comment">//查看hexo版本，检验是否安装成功</span></span><br></pre></td></tr></table></figure><h3 id="2-初始化网站"><a href="#2-初始化网站" class="headerlink" title="2.初始化网站"></a>2.初始化网站</h3><p>安装好Hexo后，使用下面命令（同样是在<code>账户名.github.io</code>目录下进行）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ hexo init</span><br><span class="line">$ npm install  <span class="comment">//安装依赖</span></span><br><span class="line">$ npm install hexo-server --save  <span class="comment">//搭建本地服务器所需插件</span></span><br><span class="line">$ npm install hexo-deployer-git --save  <span class="comment">//使用git方式进行部署博客所需插件</span></span><br></pre></td></tr></table></figure><p>所需文件生成后，根据<a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">网址</a>了解每个文件的含义</p><h3 id="3-生成静态网页"><a href="#3-生成静态网页" class="headerlink" title="3.生成静态网页"></a>3.生成静态网页</h3><p>输入下面命令</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo g  <span class="comment">//生成静态页面</span></span><br><span class="line">$ hexo server  <span class="comment">//启动服务器，若成功，访问http://localhost:4000即可看到网页</span></span><br></pre></td></tr></table></figure><h2 id="七、Git与Github关联"><a href="#七、Git与Github关联" class="headerlink" title="七、Git与Github关联"></a>七、Git与Github关联</h2><p>前置条件：安装好Git、创建好Github仓库</p><h3 id="1-设置账号信息"><a href="#1-设置账号信息" class="headerlink" title="1.设置账号信息"></a>1.设置账号信息</h3><p>输入下面命令</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global user.name <span class="string">"your Github_Name"</span></span><br><span class="line">$ git config --global user.email <span class="string">"your_email@youremail.com"</span></span><br></pre></td></tr></table></figure><h3 id="2-检查电脑上是否存在SSH-key"><a href="#2-检查电脑上是否存在SSH-key" class="headerlink" title="2.检查电脑上是否存在SSH key"></a>2.检查电脑上是否存在SSH key</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cd ~/.ssh</span><br></pre></td></tr></table></figure><h3 id="3-备份并移除原来的SSH-key设置-如果不移除，新生成的ssh-key也可以覆盖原来的"><a href="#3-备份并移除原来的SSH-key设置-如果不移除，新生成的ssh-key也可以覆盖原来的" class="headerlink" title="3.备份并移除原来的SSH key设置(如果不移除，新生成的ssh key也可以覆盖原来的)"></a>3.备份并移除原来的SSH key设置(如果不移除，新生成的ssh key也可以覆盖原来的)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ ls</span><br><span class="line">configid_rsaid_rsa.pubknown_hosts</span><br><span class="line">$ mkdir key_backup</span><br><span class="line">$ cp id_rsa* key_backup</span><br><span class="line">$ rm id_rsa*</span><br></pre></td></tr></table></figure><h3 id="4-生成新的SSH-key"><a href="#4-生成新的SSH-key" class="headerlink" title="4.生成新的SSH key"></a>4.生成新的SSH key</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -C <span class="string">"邮件地址@youremail.com"</span></span><br><span class="line">Generating <span class="keyword">public</span>/<span class="keyword">private</span> rsa key pair.</span><br><span class="line"><span class="function">Enter file in which to save the <span class="title">key</span> <span class="params">(/Users/your_user_directory/.ssh/id_rsa)</span>:&lt;回车就好&gt;</span></span><br></pre></td></tr></table></figure><p>系统会要求输入加密串（可以不输，直接回车，这里输入的密码用于本地上传文件到Github上时验证）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Enter <span class="title">passphrase</span> <span class="params">(empty <span class="keyword">for</span> no passphrase)</span>:&lt;输入加密串&gt;</span></span><br><span class="line"><span class="function">Enter same passphrase again:&lt;再次输入加密串&gt;</span></span><br></pre></td></tr></table></figure><p>若出现<code>the key&#39;s randomart image is:</code>则生成SSH key 成功</p><h3 id="5-添加SSH-key到Github"><a href="#5-添加SSH-key到Github" class="headerlink" title="5.添加SSH key到Github"></a>5.添加SSH key到Github</h3><p>用文本编辑工具打开id_rsa.pub文件，这个文件在C盘-&gt;用户名-&gt;.ssh文件夹里面，文件内容就是上一步生成的SSH key，复制下来。<br>打开Github创建的仓库，点击Setting，点击左边选项栏Deploy keys，将刚才复制的内容粘贴到key一栏<br>Allow Write Access打上勾</p><h3 id="6-测试是否成功"><a href="#6-测试是否成功" class="headerlink" title="6.测试是否成功"></a>6.测试是否成功</h3><p>输入下面命令</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh -T git<span class="meta">@github</span>.com</span><br></pre></td></tr></table></figure><p>程序会询问你，此时输入<code>yes</code>,如果输入后出现了包含<code>Hi</code>的欢迎字样，则成功</p><h2 id="八、部署到Github"><a href="#八、部署到Github" class="headerlink" title="八、部署到Github"></a>八、部署到Github</h2><p>修改项目文件夹里的<code>_config.yml</code>，设置如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: git<span class="meta">@github</span>.com:账户名/账户名.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><p>注意这里冒号后面要空一个字符<br>Git Bash 定位到本地博客，输入下面命令</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo g  <span class="comment">//生成静态页面</span></span><br><span class="line">$ hexo server  <span class="comment">//启动服务器，若成功，访问http://localhost:4000即可</span></span><br><span class="line">$ hexo deploy  <span class="comment">//部署</span></span><br></pre></td></tr></table></figure><h2 id="九、域名绑定"><a href="#九、域名绑定" class="headerlink" title="九、域名绑定"></a>九、域名绑定</h2><h3 id="1-点击Github的setting"><a href="#1-点击Github的setting" class="headerlink" title="1.点击Github的setting"></a>1.点击Github的<code>setting</code></h3><p>找到<code>GitHub Pages</code>里的<code>Custom domain</code>，填上域名，这时候项目根目录应该会出现一个名为CNAME的文件了。打开本地博客/source目录，新建CNAME文件，注意没有后缀。然后在里面写上你的域名（如:test.com,不需要添加http/www等前缀），保存。最后运行hexo g、hexo d上传到github</p><h3 id="2-根据IP地址添加解析"><a href="#2-根据IP地址添加解析" class="headerlink" title="2.根据IP地址添加解析"></a>2.根据IP地址添加解析</h3><p>打开cmd,Ping 账号名.github.io,获得IP地址<br>添加A类型，主机记录分别为@和WWW的两条解析，记录值为上面IP地址</p><h3 id="3-测试"><a href="#3-测试" class="headerlink" title="3.测试"></a>3.测试</h3><p>访问网址，确认是否成功</p><h2 id="十、网站优化"><a href="#十、网站优化" class="headerlink" title="十、网站优化"></a>十、网站优化</h2><h3 id="1、博客文章无法显示图片"><a href="#1、博客文章无法显示图片" class="headerlink" title="1、博客文章无法显示图片"></a>1、博客文章无法显示图片</h3><h4 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h4><p>上传的markdown中引用的是电脑本地的图片，而这些图片并没有上传到GitHub上，所以无法显示图片</p><h4 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h4><ol><li>修改系统配置文件中<code>post_asset_folder</code>为<code>true</code>，此时新建博客后，会出现一个和文件同名的文件夹</li><li>安装插件：<code>npm install https://github.com/CodeFalling/hexo-asset-image --save</code></li><li>文章在引用图片时，采用相对路径</li></ol><p>此办法将图片也上传到GitHub上，并用相对路径来调用图片，问题解决。</p>]]></content>
      
      
      <categories>
          
          <category> 折腾 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Blog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python之datetime模块</title>
      <link href="/2021/01/08/python-datetime/"/>
      <url>/2021/01/08/python-datetime/</url>
      
        <content type="html"><![CDATA[<ol><li>初识time</li><li>初识datetime</li><li>计算两个时间点之间相差多少天、小时、分、秒</li></ol><a id="more"></a><h3 id="1、初识time"><a href="#1、初识time" class="headerlink" title="1、初识time"></a>1、初识time</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取当前时间的时间戳，python中时间戳整数位是秒数，Java和JavaScript中整数位是毫秒数</span></span><br><span class="line">t1 = time.time()</span><br><span class="line">print(t1)</span><br><span class="line"><span class="comment"># 输出：1610114801.1910043</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将时间戳转换为当前时区的struct_time，gmtime()方法将一个时间戳转为UTC时区（0时区）的struct_time</span></span><br><span class="line"><span class="comment"># tm_wday:0-6(0表示周1)，tm_yday(一年中的第几天),tm_isdst:夏令时</span></span><br><span class="line">t2 = time.localtime(t1)</span><br><span class="line">print(t2)</span><br><span class="line"><span class="comment"># 输出：time.struct_time(tm_year=2021, tm_mon=1, tm_mday=8, tm_hour=22, tm_min=6, tm_sec=41, tm_wday=4, tm_yday=8, tm_isdst=0)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将一个struct_time 转为时间戳</span></span><br><span class="line">t3 = time.mktime(t2)</span><br><span class="line">print(t3)</span><br><span class="line"><span class="comment"># 输出：1610114801.0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将一个代表时间的元组或者strut_time 转为 格式化的字符串</span></span><br><span class="line">t4 = time.strftime(<span class="string">'%Y-%m-%d %X'</span>, time.localtime())</span><br><span class="line">print(t4)</span><br><span class="line"><span class="comment"># 输出：2021-01-08 22:06:41</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将一个格式化的字符串转为 strut_time</span></span><br><span class="line">t5 = time.strptime(t4, <span class="string">'%Y-%m-%d %X'</span>)</span><br><span class="line">print(t5)</span><br><span class="line"><span class="comment"># 输出：time.struct_time(tm_year=2021, tm_mon=1, tm_mday=8, tm_hour=22, tm_min=6, tm_sec=41, tm_wday=4, tm_yday=8, tm_isdst=-1)</span></span><br></pre></td></tr></table></figure><h3 id="2、初识datetime"><a href="#2、初识datetime" class="headerlink" title="2、初识datetime"></a>2、初识datetime</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime,timedelta</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取当前日期和时间</span></span><br><span class="line">dt1 = datetime.now()</span><br><span class="line">print(dt1)</span><br><span class="line"><span class="comment"># 输出：2021-01-08 21:30:19.164887</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 当前时间去掉毫秒数</span></span><br><span class="line">print(datetime.now().replace(microsecond=<span class="number">0</span>))</span><br><span class="line"><span class="comment"># 输出：2021-01-08 21:30:19</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取指定日期和时间</span></span><br><span class="line">dt2 = datetime(<span class="number">2021</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">11</span>,<span class="number">15</span>,<span class="number">54</span>)</span><br><span class="line">print(dt2)</span><br><span class="line"><span class="comment"># 输出：2021-03-04 11:15:54</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># datetime 转为 timestamp</span></span><br><span class="line">ts = dt2.timestamp()</span><br><span class="line">print(ts)</span><br><span class="line"><span class="comment"># 输出：1614827754.0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># timestamp 转为 datetime</span></span><br><span class="line">dt3 = datetime.fromtimestamp(ts)</span><br><span class="line">print(dt3)</span><br><span class="line"><span class="comment"># 输出：2021-03-04 11:15:54</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># str 转为 datetime</span></span><br><span class="line">dt4 = datetime.strptime(<span class="string">'2021-9-23 18:46:34'</span>, <span class="string">'%Y-%m-%d %H:%M:%S'</span>)</span><br><span class="line">print(dt4)</span><br><span class="line"><span class="comment"># 输出：2021-09-23 18:46:34</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># datetime 转为 str</span></span><br><span class="line">dt5 = dt4.strftime(<span class="string">'%Y-%m-%d %H:%M:%S'</span>)</span><br><span class="line">print(dt5)</span><br><span class="line"><span class="comment"># 输出：2021-09-23 18:46:34</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># datetime 加减</span></span><br><span class="line">dt6 = dt1 + timedelta(days=<span class="number">1</span>,hours=<span class="number">1</span>,minutes=<span class="number">1</span>,seconds=<span class="number">1</span>)</span><br><span class="line">print(dt6)</span><br><span class="line"><span class="comment"># 输出：2021-01-09 22:31:20.164887</span></span><br></pre></td></tr></table></figure><h3 id="3、计算两个时间点之间相差多少天、小时、分、秒"><a href="#3、计算两个时间点之间相差多少天、小时、分、秒" class="headerlink" title="3、计算两个时间点之间相差多少天、小时、分、秒"></a>3、计算两个时间点之间相差多少天、小时、分、秒</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line">start_time = <span class="string">'2020-12-14 09:13:44'</span></span><br><span class="line"><span class="comment"># 获得datetime类型的当前时间作为结束时间</span></span><br><span class="line">end_time = datetime.now().replace(microsecond=<span class="number">0</span>)</span><br><span class="line"><span class="comment"># 将开始时间转为datetime</span></span><br><span class="line">start_time1 = datetime.strptime(start_time, <span class="string">'%Y-%m-%d %H:%M:%S'</span>)</span><br><span class="line"><span class="comment"># 获得两个日期之间相差的秒数</span></span><br><span class="line">seconds = (end_time-start_time1).total_seconds()</span><br><span class="line"><span class="keyword">if</span> seconds&lt;<span class="number">0</span>:</span><br><span class="line">    seconds = -seconds</span><br><span class="line"><span class="comment"># 根据相差的秒数转换成天、小时、分钟、秒</span></span><br><span class="line">str_day = str(seconds // <span class="number">86400</span>)[:<span class="number">-2</span>]</span><br><span class="line">str_hours = str((seconds % <span class="number">86400</span>) // <span class="number">3600</span>)[:<span class="number">-2</span>]</span><br><span class="line">str_minute = str(((seconds % <span class="number">86400</span>) % <span class="number">3600</span>) // <span class="number">60</span>)[:<span class="number">-2</span>]</span><br><span class="line">str_seconds = str(((seconds % <span class="number">86400</span>) % <span class="number">60</span>) % <span class="number">60</span>)[:<span class="number">-2</span>]</span><br><span class="line"><span class="comment"># 打印</span></span><br><span class="line">print(<span class="string">'开始时间：'</span> + str(start_time1))</span><br><span class="line">print(<span class="string">'结束时间：'</span> + str(end_time))</span><br><span class="line">print(<span class="string">'相差：'</span> + str_day + <span class="string">'天'</span> + str_hours + <span class="string">'小时'</span>+ str_minute + <span class="string">'分钟'</span> + str_seconds+ <span class="string">'秒'</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">输出：</span></span><br><span class="line"><span class="string">开始时间：2020-12-14 09:13:44</span></span><br><span class="line"><span class="string">结束时间：2021-01-08 22:10:30</span></span><br><span class="line"><span class="string">相差：25天12小时56分钟46秒</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux下安装JDK</title>
      <link href="/2021/01/08/linux-jdk/"/>
      <url>/2021/01/08/linux-jdk/</url>
      
        <content type="html"><![CDATA[<p>通过rpm包安装</p><a id="more"></a><h3 id="步骤："><a href="#步骤：" class="headerlink" title="步骤："></a>步骤：</h3><p>1、从华为开源镜像网站中下载jdk的rpm包</p><p>2、在当前用户home目录下新建一个downloadfile，用来保存rpm包</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[mutong@localhost ~]$ mkdir downloadfile</span><br></pre></td></tr></table></figure><p>3、利用xftp将rpm包从Windows传输到Linux中的downloadfile目录下</p><p>4、在/usr/local目录下新建一个目录java/jdk，用来保存安装的jdk</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[mutong@localhost local]$ mkdir -p java/jdk</span><br></pre></td></tr></table></figure><p>5、rpm命令进行安装：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[mutong@localhost ~]$ sudo rpm -ivh --prefix=/usr/local/java/jdk jdk-8u202-linux-x64.rpm</span><br></pre></td></tr></table></figure><p>6、配置环境变量</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[mutong@localhost ~]$ vim /etc/profile</span><br><span class="line"># /etc/profile</span><br><span class="line"># jdk环境</span><br><span class="line"></span><br><span class="line">JAVA_HOME=/usr/local/java/jdk/jdk1.8.0_202-amd64</span><br><span class="line">CLASSPATH=.:$JAVA_HOME/lib.tools.jar</span><br><span class="line">PATH=$JAVA_HOME/bin:$PATH</span><br><span class="line">export JAVA_HOME CLASSPATH PATH</span><br></pre></td></tr></table></figure><p>7、重新加载配置文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[mutong@localhost ~]$ source /etc/profile</span><br></pre></td></tr></table></figure><p>8、测试是否安装成功</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[mutong@localhost ~]$ java -version</span><br><span class="line">java version &quot;1.8.0_202&quot;</span><br><span class="line">Java(TM) SE Runtime Environment (build 1.8.0_202-b08)</span><br><span class="line">Java HotSpot(TM) 64-Bit Server VM (build 25.202-b08, mixed mode)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 安装步骤 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python之os模块</title>
      <link href="/2021/01/06/python-os/"/>
      <url>/2021/01/06/python-os/</url>
      
        <content type="html"><![CDATA[<p>初识os模块</p><a id="more"></a><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getdemo</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 获取当前工作目录</span></span><br><span class="line">    print(os.getcwd())</span><br><span class="line">    <span class="comment"># 输出结果：F:\workspace\day2</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 返回文件列表</span></span><br><span class="line">    print(os.listdir(<span class="string">'.'</span>))</span><br><span class="line">    <span class="comment"># 输出结果：['.idea', 'ershoufang.txt', 'main.py', 'osfile', 'python_os.py', 'python_os1.py', 'selenium1.py', 'venv']</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 创建文件夹</span></span><br><span class="line">    <span class="comment"># os.mkdir('./osfile')</span></span><br><span class="line">    <span class="comment"># 输出结果：在当前目录下创建了一个名为osfile的目录</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取系统环境变量并打印</span></span><br><span class="line">    <span class="comment"># for i in (os.getenv('PATH').split(';')):</span></span><br><span class="line">    <span class="comment">#     print(i)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 表示当前文件夹</span></span><br><span class="line">    print(os.curdir)</span><br><span class="line">    <span class="comment"># 输出结果：.</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 表示上一层文件夹</span></span><br><span class="line">    print(os.pardir)</span><br><span class="line">    <span class="comment"># 输出结果：..</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取路径间间隔符</span></span><br><span class="line">    print(os.sep)</span><br><span class="line">    <span class="comment"># 输出结果：\</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 将相对路径转为绝对路径</span></span><br><span class="line">    print(os.path.abspath(<span class="string">'./os_path'</span>))</span><br><span class="line">    <span class="comment"># 输出结果：F:\workspace\day2\os_path</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取当前脚本的绝对路径</span></span><br><span class="line">    print(os.path.abspath(__file__))</span><br><span class="line">    <span class="comment"># 输出结果：F:\workspace\day2\python_os.py</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取路径中的目录部分</span></span><br><span class="line">    print(os.path.dirname(__file__))</span><br><span class="line">    <span class="comment"># F:/workspace/day2</span></span><br><span class="line">    print(os.path.dirname(os.path.abspath(__file__)))</span><br><span class="line">    <span class="comment"># 输出结果：F:\workspace\day2</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取目录中的主体部分</span></span><br><span class="line">    print(os.path.basename(os.path.abspath(__file__)))</span><br><span class="line">    <span class="comment"># 输出结果：python_os.py</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 将路径切割为目录部分和主体部分</span></span><br><span class="line">    print(os.path.split(os.path.abspath(__file__)))</span><br><span class="line">    <span class="comment"># 输出结果：('F:\\workspace\\day2', 'python_os.py')</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 将两个路径合为一个</span></span><br><span class="line">    print(os.path.join(os.path.abspath(<span class="string">'./osfile'</span>), os.pardir))</span><br><span class="line">    <span class="comment"># 输出结果: F:\workspace\day2\osfile\..</span></span><br><span class="line">    print(os.path.join(os.path.dirname(__file__), os.pardir))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 检测路径是否存在</span></span><br><span class="line">    print(os.path.exists(<span class="string">'./osfile'</span>))</span><br><span class="line">    <span class="comment"># 输出结果： True</span></span><br><span class="line"></span><br><span class="line">    path_dir = os.path.join(os.path.dirname(__file__), os.pardir)</span><br><span class="line">    print(path_dir)</span><br><span class="line">    <span class="comment"># 输出结果：F:/workspace/day2\..</span></span><br><span class="line">    path_dir = os.path.abspath(os.path.join(os.path.dirname(__file__), os.pardir))</span><br><span class="line">    print(path_dir)</span><br><span class="line">    <span class="comment"># 输出结果： F:\workspace</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    getdemo()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>爬虫实战练习（四）</title>
      <link href="/2020/12/30/python-pachong-test4/"/>
      <url>/2020/12/30/python-pachong-test4/</url>
      
        <content type="html"><![CDATA[<p>爬取代理ip，检测ip有效性，保存有效的ip</p><a id="more"></a><h3 id="一、知识点"><a href="#一、知识点" class="headerlink" title="一、知识点"></a>一、知识点</h3><blockquote><p>设置代理</p></blockquote><h3 id="二、思路"><a href="#二、思路" class="headerlink" title="二、思路"></a>二、思路</h3><blockquote><ol><li>获取每页url</li><li>获取当前页数据，得到代理ip</li><li>检查代理ip有效性</li><li>将有效的代理ip进行保存</li></ol></blockquote><h3 id="三、代码"><a href="#三、代码" class="headerlink" title="三、代码"></a>三、代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 爬取代理ip并检测代理ip的有效性，将有效的代理ip保存</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">page_deal</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    # 分页处理，返回每页的url</span></span><br><span class="line"><span class="string">    :return: page_url_list</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    model = <span class="string">'http://www.nimadaili.com/https/%d/'</span></span><br><span class="line">    page_url_list = []</span><br><span class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">2</span>):</span><br><span class="line">        page_url = format(model % n)</span><br><span class="line">        page_url_list.append(page_url)</span><br><span class="line">        <span class="comment"># print(page_url)</span></span><br><span class="line">    <span class="keyword">return</span> page_url_list</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_header</span><span class="params">()</span>:</span></span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">'Accept'</span>: <span class="string">'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9'</span>,</span><br><span class="line">        <span class="string">'Accept-Encoding'</span>: <span class="string">'gzip, deflate, br'</span>,</span><br><span class="line">        <span class="string">'Accept-Language'</span>: <span class="string">'zh-CN,zh;q=0.9,en-US;q=0.8,en;q=0.7'</span>,</span><br><span class="line">        <span class="string">'Connection'</span>: <span class="string">'keep-alive'</span>,</span><br><span class="line">        <span class="string">'User-Agent'</span>: <span class="string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.88 Safari/537.36"</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> headers</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check_url</span><span class="params">(ip)</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    # 检查ip地址可用性</span></span><br><span class="line"><span class="string">    :param ip:</span></span><br><span class="line"><span class="string">    :return: ip</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    proxy = &#123;</span><br><span class="line">        <span class="string">'https'</span>: ip</span><br><span class="line">    &#125;</span><br><span class="line">    print(<span class="string">'ip检测中，请稍等:'</span> + ip)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 随便请求一个https地址的资源</span></span><br><span class="line">        response = requests.get(url=<span class="string">'https://www.baidu.com'</span>, headers=get_header(), proxies=proxy, timeout=<span class="number">10</span>)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="comment"># 存在异常</span></span><br><span class="line">        print(<span class="string">'检测结果：ip不合适'</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment"># 访问资源成功</span></span><br><span class="line">        <span class="keyword">if</span> response.status_code == <span class="number">200</span>:</span><br><span class="line">            print(<span class="string">'检测结果：ip合适'</span>)</span><br><span class="line">            <span class="keyword">return</span> ip</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">'检测结果：ip不合适'</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_ip</span><span class="params">(ip_list)</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    打印存放的ip</span></span><br><span class="line"><span class="string">    :param ip_list:</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    <span class="keyword">if</span> len(ip_list) == <span class="number">0</span>:</span><br><span class="line">        print(<span class="string">'没有合适的ip'</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">for</span> ip <span class="keyword">in</span> ip_list:</span><br><span class="line">            print(ip)</span><br><span class="line">        print(<span class="string">'打印完毕，一共&#123;0&#125;条'</span>.format(len(ip_list)))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 定义一个有效的代理ip</span></span><br><span class="line">    proxy = &#123;</span><br><span class="line">        <span class="string">'https'</span>: <span class="string">'150.138.253.71:808'</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"># 获取每页的url</span></span><br><span class="line">    page_url_list = page_deal()</span><br><span class="line">    <span class="comment"># 定义一个列表，存放有效的ip</span></span><br><span class="line">    ip_list = []</span><br><span class="line">    <span class="comment"># 处理每一页数据</span></span><br><span class="line">    <span class="keyword">for</span> url <span class="keyword">in</span> page_url_list:</span><br><span class="line">        <span class="comment"># 获取当前页网页数据</span></span><br><span class="line">        page_text = requests.get(url, get_header(), proxies=proxy).text</span><br><span class="line">        <span class="comment"># 解析网页数据</span></span><br><span class="line">        tree = etree.HTML(page_text)</span><br><span class="line">        <span class="comment"># 处理并得到目标数据</span></span><br><span class="line">        tr_list = tree.xpath(<span class="string">'//table[@class="fl-table"]/tbody/tr'</span>)</span><br><span class="line">        <span class="keyword">for</span> tr <span class="keyword">in</span> tr_list:</span><br><span class="line">            ip = tr.xpath(<span class="string">'./td[1]/text()'</span>)[<span class="number">0</span>]</span><br><span class="line">            <span class="comment"># 如果ip地址有效</span></span><br><span class="line">            <span class="keyword">if</span> check_url(ip) <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">                <span class="comment"># 将ip地址存入列表中</span></span><br><span class="line">                ip_list.append(ip)</span><br><span class="line">                print(<span class="string">'ip保存成功:'</span> + ip)</span><br><span class="line">    print(<span class="string">'ip检测完毕\n'</span>)</span><br><span class="line">    <span class="comment"># 打印ip</span></span><br><span class="line">    print_ip(ip_list)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 实战练习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>爬虫实战练习（三）</title>
      <link href="/2020/12/28/python-pachong-test3/"/>
      <url>/2020/12/28/python-pachong-test3/</url>
      
        <content type="html"><![CDATA[<p>爬取4k图片</p><a id="more"></a><h3 id="一、知识点"><a href="#一、知识点" class="headerlink" title="一、知识点"></a>一、知识点</h3><blockquote><p>xpath解析数据</p></blockquote><h3 id="二、思路"><a href="#二、思路" class="headerlink" title="二、思路"></a>二、思路</h3><blockquote><ol><li>获取网页数据</li><li>解析网页结构</li><li>通过xpath获取目标数据</li><li>处理数据并保存</li></ol></blockquote><h3 id="三、代码"><a href="#三、代码" class="headerlink" title="三、代码"></a>三、代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 爬取4k图片</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_url</span><span class="params">()</span>:</span></span><br><span class="line">    url = <span class="string">"http://pic.netbian.com/4kfengjing/"</span></span><br><span class="line">    <span class="keyword">return</span> url</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_header</span><span class="params">()</span>:</span></span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">'User-Agent'</span>: <span class="string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.88 Safari/537.36"</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> headers</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run_main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    主要实现代码</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    <span class="comment"># 1.获取网页数据</span></span><br><span class="line">    response = requests.get(get_url(), get_header())</span><br><span class="line">    <span class="comment"># 2.将获取的内容转码为gbk</span></span><br><span class="line">    response.encoding = <span class="string">'gbk'</span></span><br><span class="line">    <span class="comment"># 3.将获取的内容加载为html格式</span></span><br><span class="line">    tree = etree.HTML(response.text)</span><br><span class="line">    <span class="comment"># 4.创建一个文件用来保存图片</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(<span class="string">'./4kfengjing'</span>):</span><br><span class="line">        os.mkdir(<span class="string">'./4kfengjing'</span>)</span><br><span class="line">    <span class="comment"># 5.通过xpath处理网页数据</span></span><br><span class="line">    li_list = tree.xpath(<span class="string">'//div[@class="slist"]/ul/li'</span>)</span><br><span class="line">    <span class="keyword">for</span> li <span class="keyword">in</span> li_list:</span><br><span class="line">        <span class="comment"># 5.1 获取图片url</span></span><br><span class="line">        img_src = <span class="string">'http://pic.netbian.com/'</span>+li.xpath(<span class="string">'./a/img/@src'</span>)[<span class="number">0</span>]</span><br><span class="line">        <span class="comment"># 5.2 获取图片名称</span></span><br><span class="line">        img_name = li.xpath(<span class="string">'./a/b/text()'</span>)[<span class="number">0</span>]</span><br><span class="line">        <span class="comment"># 5.2 根据图片url，请求到图片数据</span></span><br><span class="line">        img_data = requests.get(img_src, get_header()).content</span><br><span class="line">        <span class="comment"># 5.3 构建图片保存路径</span></span><br><span class="line">        img_path = <span class="string">'4kfengjing/'</span> + img_name + <span class="string">'.jpg'</span></span><br><span class="line">        <span class="comment"># 5.4 进行保存</span></span><br><span class="line">        <span class="keyword">with</span> open(img_path, <span class="string">'wb'</span>) <span class="keyword">as</span> fp:</span><br><span class="line">            fp.write(img_data)</span><br><span class="line">            print(img_name + <span class="string">'-----下载成功'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    run_main()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 实战练习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>爬虫实战练习（二）</title>
      <link href="/2020/12/20/python-pachong-test2/"/>
      <url>/2020/12/20/python-pachong-test2/</url>
      
        <content type="html"><![CDATA[<p>爬取三国演义章节名称及内容</p><a id="more"></a><h3 id="一、知识点"><a href="#一、知识点" class="headerlink" title="一、知识点"></a>一、知识点</h3><blockquote><p>bs4解析数据</p></blockquote><h3 id="二、思路"><a href="#二、思路" class="headerlink" title="二、思路"></a>二、思路</h3><blockquote><ol><li>请求章节页数据</li><li>bs4处理章节页数据，获得章节名称及内容的url</li><li>请求章节内容数据</li><li>bs4处理章节内容数据，获得章节内容</li><li>将章节内容存到文件中</li></ol></blockquote><h3 id="三、代码"><a href="#三、代码" class="headerlink" title="三、代码"></a>三、代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#  爬取三国演义章节标题和内容</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_url</span><span class="params">()</span>:</span></span><br><span class="line">    url = <span class="string">"https://www.shicimingju.com/book/sanguoyanyi.html"</span></span><br><span class="line">    <span class="keyword">return</span> url</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_header</span><span class="params">()</span>:</span></span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">'User-Agent'</span>: <span class="string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.88 Safari/537.36"</span>,</span><br><span class="line">        <span class="string">'Content-Type'</span>: <span class="string">'application/json; charset=utf-8'</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> headers</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run_main</span><span class="params">()</span>:</span></span><br><span class="line">    page_text = requests.get(get_url(),get_header()).text</span><br><span class="line">    <span class="comment"># 实例化一个BeautifulSoup对象，以lxml方式解析</span></span><br><span class="line">    soup = BeautifulSoup(page_text, <span class="string">'lxml'</span>)</span><br><span class="line">    <span class="comment"># 获取含有章节名称和详情url的li列表</span></span><br><span class="line">    li_list = soup.select(<span class="string">'.book-mulu &gt; ul &gt; li'</span>)</span><br><span class="line">    <span class="comment"># 打开文件</span></span><br><span class="line">    fp = open(<span class="string">'./sanguoyanyi.txt'</span>, <span class="string">'w'</span>, encoding=<span class="string">'utf-8'</span>)</span><br><span class="line">    <span class="comment"># 处理页面数据</span></span><br><span class="line">    <span class="keyword">for</span> li <span class="keyword">in</span> li_list:</span><br><span class="line">        time.sleep(<span class="number">3</span>)</span><br><span class="line">        <span class="comment"># 获取章节名</span></span><br><span class="line">        chapter_name = li.a.string</span><br><span class="line">        <span class="comment"># 获取章节内容的url</span></span><br><span class="line">        content_url = <span class="string">"https://www.shicimingju.com"</span> + li.a[<span class="string">'href'</span>]</span><br><span class="line">        <span class="comment"># 请求章节内容</span></span><br><span class="line">        content_text = requests.get(content_url, get_header()).text</span><br><span class="line">        <span class="comment"># 处理详情数据，获取目标内容</span></span><br><span class="line">        detail_soup = BeautifulSoup(content_text, <span class="string">'lxml'</span>)</span><br><span class="line">        chapter_content = detail_soup.find(<span class="string">'div'</span>,class_=<span class="string">'chapter_content'</span>).text</span><br><span class="line">        <span class="comment"># 将内容写入文件</span></span><br><span class="line">        fp.write(chapter_name + <span class="string">":\n"</span> + chapter_content + <span class="string">"\n"</span>)</span><br><span class="line">        print(<span class="string">"爬取成功"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    run_main()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 实战练习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python问题处理</title>
      <link href="/2020/12/20/python-error-deal/"/>
      <url>/2020/12/20/python-error-deal/</url>
      
        <content type="html"><![CDATA[<ol><li>更新pip失败</li><li>安装超时</li></ol><a id="more"></a><h4 id="一、python-更新pip失败"><a href="#一、python-更新pip失败" class="headerlink" title="一、python 更新pip失败"></a>一、python 更新pip失败</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看pip版本</span></span><br><span class="line"><span class="comment"># 1</span></span><br><span class="line">pip -V</span><br><span class="line"><span class="comment"># 2</span></span><br><span class="line">pip show pip</span><br><span class="line"><span class="comment"># 更新pip</span></span><br><span class="line">python -m  pip install --upgrade pip</span><br><span class="line"><span class="comment"># 使用上述命名更新pip失败，可以使用下面这个命令</span></span><br><span class="line">python -m pip install -U --force-reinstall pip</span><br></pre></td></tr></table></figure><h4 id="二、python安装时超时"><a href="#二、python安装时超时" class="headerlink" title="二、python安装时超时"></a>二、python安装时超时</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 报错信息：</span></span><br><span class="line">socket timeout:The read operation timed out</span><br><span class="line"><span class="comment"># 使用国内源解决这个问题</span></span><br><span class="line">pip install 包名 -i https://pypi.douban.com/simple</span><br><span class="line"><span class="comment"># 其他国内源地址</span></span><br><span class="line">-i https://pypi.douban.com/simple</span><br><span class="line">-i https://pypi.doubanio.com/simple</span><br><span class="line">-i https://pypi.tuna.tsinghua.edu.cn/simple</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 问题处理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>爬虫实战练习（一）</title>
      <link href="/2020/12/20/python-pachong-test1/"/>
      <url>/2020/12/20/python-pachong-test1/</url>
      
        <content type="html"><![CDATA[<p>爬取糗事百科中的图片</p><a id="more"></a><h3 id="一、运用知识点"><a href="#一、运用知识点" class="headerlink" title="一、运用知识点"></a>一、运用知识点</h3><blockquote><p>正则表达式解析数据</p></blockquote><h3 id="二、思路"><a href="#二、思路" class="headerlink" title="二、思路"></a>二、思路</h3><blockquote><ol><li>请求糗事百科中的网页数据，数据中含有图片</li><li>利用正则表达式将目标数据提取出来，得到图片的链接列表</li><li>根据图片的链接列表，请求图片数据</li><li>将图片数据存入到文件夹中</li><li>分析不同页面的url，请求多个页面的数据并存储</li></ol></blockquote><h3 id="三、代码"><a href="#三、代码" class="headerlink" title="三、代码"></a>三、代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 爬取糗事百科中的图片</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_header</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    获取headers</span></span><br><span class="line"><span class="string">    :return: headers</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">'User-Agent'</span>: <span class="string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.88 Safari/537.36"</span>,</span><br><span class="line">        <span class="string">'Content-Type'</span>: <span class="string">'application/json; charset=utf-8'</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> headers</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">page_deal</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    分页处理</span></span><br><span class="line"><span class="string">    :return: url_list ,含每页的url地址</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    <span class="comment"># 定义一个通用url模板</span></span><br><span class="line">    model_url = <span class="string">"https://www.qiushibaike.com/imgrank/page/%d/"</span></span><br><span class="line">    <span class="comment"># 定义要爬取的页数范围，表示第1页到第n页</span></span><br><span class="line">    n = <span class="number">2</span></span><br><span class="line">    <span class="comment"># 定义一个url存放列表</span></span><br><span class="line">    url_list = []</span><br><span class="line">    <span class="comment"># 将每页url地址存放在url_list中</span></span><br><span class="line">    <span class="keyword">for</span> pageNum <span class="keyword">in</span> range(<span class="number">1</span>, n + <span class="number">1</span>):</span><br><span class="line">        real_url = format(model_url % pageNum)</span><br><span class="line">        url_list.append(real_url)</span><br><span class="line">    <span class="keyword">return</span> url_list</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">save_location</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    创建文件夹，用于保存图片</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(<span class="string">'./qiutu'</span>):</span><br><span class="line">        os.mkdir(<span class="string">'./qiutu'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_page_data</span><span class="params">(url_list)</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    读取每页的数据</span></span><br><span class="line"><span class="string">    :param url_list:</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    <span class="keyword">for</span> page_url <span class="keyword">in</span> url_list:</span><br><span class="line">        <span class="comment"># 请求网页数据</span></span><br><span class="line">        response = requests.get(page_url, get_header()).text</span><br><span class="line">        <span class="comment"># 用正则表达式提取图片路径</span></span><br><span class="line">        ex= <span class="string">r'&lt;div class="thumb"&gt;.*?&lt;img src="(.*?)" alt=.*?&lt;/div&gt;'</span></span><br><span class="line">        <span class="comment"># 查找出全部符合正则的数据，re.S 即为' . '并且包括换行符在内的任意字符（' . '不包括换行符）</span></span><br><span class="line">        img_list = re.findall(ex, response, re.S)</span><br><span class="line">        <span class="keyword">return</span> img_list</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">deal_page_data</span><span class="params">(img_list)</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    处理每页数据并保存</span></span><br><span class="line"><span class="string">    :param img_list:</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    <span class="keyword">for</span> src <span class="keyword">in</span> img_list:</span><br><span class="line">        <span class="comment"># 拼接图片url</span></span><br><span class="line">        src = <span class="string">"https:"</span> + src</span><br><span class="line">        <span class="comment"># 请求图片的二进制数据</span></span><br><span class="line">        img_data = requests.get(url=src, headers=get_header()).content</span><br><span class="line">        <span class="comment"># 生成图片名称</span></span><br><span class="line">        img_name = src.split(<span class="string">'/'</span>)[<span class="number">-1</span>]</span><br><span class="line">        <span class="comment"># 图片存储路径</span></span><br><span class="line">        imgpath = <span class="string">'./qiutu/'</span> + img_name</span><br><span class="line">        <span class="comment"># 进行存储</span></span><br><span class="line">        <span class="keyword">with</span> open(imgpath, <span class="string">'wb'</span>) <span class="keyword">as</span> fp:</span><br><span class="line">            fp.write(img_data)</span><br><span class="line">            print(img_name, <span class="string">'下载成功'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run_main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 创建一个文件夹，保存所有图片</span></span><br><span class="line">    save_location()</span><br><span class="line">    <span class="comment"># 获取分页url列表</span></span><br><span class="line">    url_list = page_deal()</span><br><span class="line">    <span class="comment"># 获取每页的数据</span></span><br><span class="line">    img_list = get_page_data(url_list)</span><br><span class="line">    <span class="comment"># 处理每页数据并保存</span></span><br><span class="line">    deal_page_data(img_list)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    run_main()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 实战练习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python之requests库</title>
      <link href="/2020/12/09/python-requests/"/>
      <url>/2020/12/09/python-requests/</url>
      
        <content type="html"><![CDATA[<ol><li>requests库常用方法</li><li>获取响应内容</li><li>设置超时</li></ol><a id="more"></a><h3 id="一、Request库的常用方法"><a href="#一、Request库的常用方法" class="headerlink" title="一、Request库的常用方法"></a>一、Request库的常用方法</h3><h4 id="（一）requests-request-method-url-kwargs"><a href="#（一）requests-request-method-url-kwargs" class="headerlink" title="（一）requests.request(method,url,**kwargs)"></a>（一）requests.request(method,url,**kwargs)</h4><blockquote><p>method：常用的有<code>get</code>、<code>post</code>、<code>put</code>、<code>delete</code>、<code>head</code>、<code>options</code></p><p>url：请求的URL</p><p>**kwargs：13个控制访问的可选参数</p></blockquote><p>可选参数如下：</p><table><thead><tr><th align="left">参数名</th><th align="left">支持类型</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">params</td><td align="left">字典、字节序列</td><td align="left">以键值对的方式作为参数加入到URL中</td></tr><tr><td align="left">data</td><td align="left">字典、字节序列、文件</td><td align="left">作为请求的Body内容</td></tr><tr><td align="left">json</td><td align="left">JSON格式的数据</td><td align="left">作为请求的Body内容</td></tr><tr><td align="left">headers</td><td align="left">字典</td><td align="left">HTTP请求头，作为请求对象Header里的内容</td></tr><tr><td align="left">cookies</td><td align="left">字典或CookieJar</td><td align="left">请求中的Cookie</td></tr><tr><td align="left">files</td><td align="left">字典，形式为{filename,fileobject}</td><td align="left">提交传递文件</td></tr><tr><td align="left">auth</td><td align="left">Auth句柄或（user,pass）元组</td><td align="left"></td></tr><tr><td align="left">timeout</td><td align="left">浮点数、元组</td><td align="left">超时时间</td></tr><tr><td align="left">allow_redirects</td><td align="left">True/False</td><td align="left">重定向开关</td></tr><tr><td align="left">proxies</td><td align="left">字典</td><td align="left">将协议映射为代理的URL</td></tr><tr><td align="left">verify</td><td align="left">True/False</td><td align="left">认证SSL证书开关</td></tr><tr><td align="left">stream</td><td align="left">True/False</td><td align="left">默认为True，为True会先下载响应头，为False会立即下载响应头和响应体</td></tr><tr><td align="left">cert</td><td align="left">字符串、元组</td><td align="left">为字符串时是SSL客户端证书文件的路径，为元组时是一个(‘cert’,’key’)二元值对</td></tr></tbody></table><h4 id="（二）request-get-url-params-None-kwargs"><a href="#（二）request-get-url-params-None-kwargs" class="headerlink" title="（二）request.get(url,params=None,**kwargs)"></a>（二）request.get(url,params=None,**kwargs)</h4><p>请求获取URL的资源</p><h4 id="（三）request-head-url-kwargs"><a href="#（三）request-head-url-kwargs" class="headerlink" title="（三）request.head(url,**kwargs)"></a>（三）request.head(url,**kwargs)</h4><p>请求获取响应的头部信息</p><h4 id="（四）request-post-url-params-None-json-None-kwargs"><a href="#（四）request-post-url-params-None-json-None-kwargs" class="headerlink" title="（四）request.post(url,params=None,json=None,**kwargs)"></a>（四）request.post(url,params=None,json=None,**kwargs)</h4><p>请求向URL的资源后附加数据</p><h4 id="（五）request-put-url-data-None-kwargs"><a href="#（五）request-put-url-data-None-kwargs" class="headerlink" title="（五）request.put(url,data=None,**kwargs)"></a>（五）request.put(url,data=None,**kwargs)</h4><p>请求向URL位置存储一个资源，覆盖原URL位置的资源</p><h4 id="（六）request-patch-url-data-None-kwargs"><a href="#（六）request-patch-url-data-None-kwargs" class="headerlink" title="（六）request.patch(url,data=None,**kwargs)"></a>（六）request.patch(url,data=None,**kwargs)</h4><p>请求局部更新URL位置的资源</p><h4 id="（七）request-delete-rul-kwargs"><a href="#（七）request-delete-rul-kwargs" class="headerlink" title="（七）request.delete(rul,**kwargs)"></a>（七）request.delete(rul,**kwargs)</h4><p>请求删除URL位置的资源</p><h3 id="二、响应"><a href="#二、响应" class="headerlink" title="二、响应"></a>二、响应</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 状态码</span></span><br><span class="line">resp.status_code</span><br><span class="line"><span class="comment"># 响应头</span></span><br><span class="line">resp.headers</span><br><span class="line"><span class="comment"># 请求链接</span></span><br><span class="line">resp.url</span><br><span class="line"><span class="comment"># 获取网页编码</span></span><br><span class="line">resp.encoding</span><br><span class="line"><span class="comment"># 获取cookie</span></span><br><span class="line">resp.cookies</span><br><span class="line"><span class="comment"># 获取网页代码</span></span><br><span class="line">resp.text</span><br><span class="line"><span class="comment"># 获取二进制数据</span></span><br><span class="line">resp.content</span><br></pre></td></tr></table></figure><p>如果HTTP请求返回了不成功的状态码，那么<code>req.raise_for_status()</code>会抛出一个HTTPError</p><h3 id="三、超时"><a href="#三、超时" class="headerlink" title="三、超时"></a>三、超时</h3><p>默认情况下，requests不会自动进行超时处理。连接超时指的是客户端到服务端的连接时，request会等待的秒数。读取超时指的是客户端等待服务器发送请求的时间。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 第一种方式，单独设置超时时间，包括连接和读取</span></span><br><span class="line">request.get(<span class="string">'www.baidu.com'</span>,timeout=<span class="number">5</span>)</span><br><span class="line"><span class="comment"># 第二种方式，分别作为连接和读取的超时时间</span></span><br><span class="line">request.get(<span class="string">'www.baidu.com'</span>,timeout=(<span class="number">1</span>,<span class="number">3</span>))</span><br><span class="line"><span class="comment"># 第三种方式，request永远等待</span></span><br><span class="line">request.get(<span class="string">'www.baidu.com'</span>,timeout=<span class="literal">None</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL练习（1）</title>
      <link href="/2020/11/10/mysqlTest1/"/>
      <url>/2020/11/10/mysqlTest1/</url>
      
        <content type="html"><![CDATA[<p>查询工资第二高的记录</p><p>查询超过经理收入的员工</p><p>查找重复的电子邮箱</p><p>找出从不订购的客户</p><p>删除重复的电子邮箱</p><a id="more"></a><h3 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h3><p>查询工资为第二高的记录，如果没有第二高的记录则返回<code>null</code></p><p>例如表<code>Employee</code>，应该查询出200</p><table><thead><tr><th align="center">id</th><th align="center">salary</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">100</td></tr><tr><td align="center">2</td><td align="center">200</td></tr><tr><td align="center">3</td><td align="center">300</td></tr></tbody></table><h3 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a>解题思路：</h3><p>利用将工资降序排序然后去第二条记录，重点在于如何处理当不存在第二高的工资时返回null。一是将表作为临时表，二是用IFNULL()函数</p><h3 id="参考SQL："><a href="#参考SQL：" class="headerlink" title="参考SQL："></a>参考SQL：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># SQL 1</span><br><span class="line">select (</span><br><span class="line">    select distinct salary from Employee order by salary Desc limit 1 offset 1</span><br><span class="line">) as SecondHignestSalary</span><br><span class="line"># SQL 2</span><br><span class="line">SELECT </span><br><span class="line">    IFNULL(</span><br><span class="line">      (SELECT DISTINCT Salary </span><br><span class="line">       FROM Employee </span><br><span class="line">       ORDER BY Salary DESC </span><br><span class="line">        LIMIT 1 OFFSET 1),</span><br><span class="line">    NULL) AS SecondHighnestSalary</span><br></pre></td></tr></table></figure><h3 id="题目描述：-1"><a href="#题目描述：-1" class="headerlink" title="题目描述："></a>题目描述：</h3><p><code>Employee</code> 表包含所有员工，他们的经理也属于员工。每个员工都有一个 Id，此外还有一列对应员工的经理的 Id</p><table><thead><tr><th>Id</th><th>Name</th><th>Salary</th><th>ManagerId</th></tr></thead><tbody><tr><td>1</td><td>Joe</td><td>70000</td><td>3</td></tr><tr><td>2</td><td>Henry</td><td>80000</td><td>4</td></tr><tr><td>3</td><td>Sam</td><td>60000</td><td>null</td></tr><tr><td>4</td><td>Max</td><td>90000</td><td>null</td></tr></tbody></table><h3 id="解题思路：-1"><a href="#解题思路：-1" class="headerlink" title="解题思路："></a>解题思路：</h3><p>采用自连接方式查询</p><h3 id="参考SQL"><a href="#参考SQL" class="headerlink" title="参考SQL:"></a>参考SQL:</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> a.name </span><br><span class="line"><span class="keyword">from</span> Employee a,Employee b</span><br><span class="line"><span class="keyword">where</span> a.ManagerId = b.Id <span class="keyword">and</span> a.Salary&gt;b.Salary;</span><br></pre></td></tr></table></figure><h3 id="题目描述：-2"><a href="#题目描述：-2" class="headerlink" title="题目描述："></a>题目描述：</h3><p>编写一个 SQL 查询，查找 <code>Person</code> 表中所有重复的电子邮箱</p><table><thead><tr><th>Id</th><th>Email</th></tr></thead><tbody><tr><td>1</td><td><a href="mailto:a@b.com" target="_blank" rel="noopener">a@b.com</a></td></tr><tr><td>2</td><td><a href="mailto:c@b.com" target="_blank" rel="noopener">c@b.com</a></td></tr><tr><td>3</td><td><a href="mailto:a@b.com" target="_blank" rel="noopener">a@b.com</a></td></tr></tbody></table><h3 id="解题思路：-2"><a href="#解题思路：-2" class="headerlink" title="解题思路："></a>解题思路：</h3><p>用group by 和having</p><h3 id="参考SQL-1"><a href="#参考SQL-1" class="headerlink" title="参考SQL:"></a>参考SQL:</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> Email </span><br><span class="line"><span class="keyword">from</span> Person </span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> Email </span><br><span class="line"><span class="keyword">having</span> <span class="keyword">count</span>(Email)&gt;<span class="number">1</span></span><br></pre></td></tr></table></figure><h3 id="题目描述：-3"><a href="#题目描述：-3" class="headerlink" title="题目描述："></a>题目描述：</h3><p>某网站包含两个表，<code>Customers</code> 表和 <code>Orders</code> 表。编写一个 SQL 查询，找出所有从不订购任何东西的客户</p><p>Customers</p><table><thead><tr><th>Id</th><th>Name</th></tr></thead><tbody><tr><td>1</td><td>Joe</td></tr><tr><td>2</td><td>Henry</td></tr><tr><td>3</td><td>Sam</td></tr><tr><td>4</td><td>Max</td></tr></tbody></table><p>Orders</p><table><thead><tr><th>Id</th><th>CustomerId</th></tr></thead><tbody><tr><td>1</td><td>3</td></tr><tr><td>2</td><td>1</td></tr></tbody></table><h3 id="解题思路：-3"><a href="#解题思路：-3" class="headerlink" title="解题思路："></a>解题思路：</h3><p>利用Not in</p><h3 id="参考SQL-2"><a href="#参考SQL-2" class="headerlink" title="参考SQL:"></a>参考SQL:</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">Name</span> </span><br><span class="line"><span class="keyword">from</span> Customers </span><br><span class="line"><span class="keyword">where</span> <span class="keyword">Id</span> </span><br><span class="line"><span class="keyword">not</span> <span class="keyword">in</span> (<span class="keyword">select</span> CustomersId <span class="keyword">from</span> Orders)</span><br></pre></td></tr></table></figure><h3 id="题目描述：-4"><a href="#题目描述：-4" class="headerlink" title="题目描述："></a>题目描述：</h3><p>编写一个 SQL 查询，来删除 <code>Person</code> 表中所有重复的电子邮箱，重复的邮箱里只保留 <strong>Id</strong> <em>最小</em> 的那个</p><table><thead><tr><th>Id</th><th>Email</th></tr></thead><tbody><tr><td>1</td><td><a href="mailto:john@example.com" target="_blank" rel="noopener">john@example.com</a></td></tr><tr><td>2</td><td><a href="mailto:bob@example.com" target="_blank" rel="noopener">bob@example.com</a></td></tr><tr><td>3</td><td><a href="mailto:john@example.com" target="_blank" rel="noopener">john@example.com</a></td></tr></tbody></table><h3 id="解题思路：-4"><a href="#解题思路：-4" class="headerlink" title="解题思路："></a>解题思路：</h3><p>自连接找出id最小的且有重复的那个邮箱</p><h3 id="参考SQL-3"><a href="#参考SQL-3" class="headerlink" title="参考SQL:"></a>参考SQL:</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 删除满足where条件的p1</span></span><br><span class="line"><span class="keyword">delete</span> p1 </span><br><span class="line"><span class="keyword">from</span> Person p1,Person p2</span><br><span class="line"><span class="keyword">where</span> p1.Email=p2.Email <span class="keyword">and</span> p1.Id&gt;p2.Id</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 力扣刷题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>adb</title>
      <link href="/2020/08/17/adb/"/>
      <url>/2020/08/17/adb/</url>
      
        <content type="html"><![CDATA[<ol><li><p>adb连接模拟器</p></li><li><p>adb连接手机</p></li><li><p>adb查看日志</p></li></ol><a id="more"></a><h3 id="安装adb"><a href="#安装adb" class="headerlink" title="安装adb"></a>安装adb</h3><p><a href="https://developer.android.google.cn/studio/releases/platform-tools.html" target="_blank" rel="noopener">https://developer.android.google.cn/studio/releases/platform-tools.html</a></p><h3 id="adb连接mumu模拟器"><a href="#adb连接mumu模拟器" class="headerlink" title="adb连接mumu模拟器"></a>adb连接mumu模拟器</h3><p>运行cmd，切换到adb命令目录或先配置好环境变量。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb connect 127.0.0.1:7555</span><br></pre></td></tr></table></figure><h3 id="查看设备是否已连接"><a href="#查看设备是否已连接" class="headerlink" title="查看设备是否已连接"></a>查看设备是否已连接</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb devices</span><br></pre></td></tr></table></figure><h3 id="查看设备连接状态"><a href="#查看设备连接状态" class="headerlink" title="查看设备连接状态"></a>查看设备连接状态</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb get-state</span><br></pre></td></tr></table></figure><table><thead><tr><th align="center">选项</th><th align="center">功能</th></tr></thead><tbody><tr><td align="center">offline</td><td align="center">设备连接异常</td></tr><tr><td align="center">device</td><td align="center">正常</td></tr><tr><td align="center">unknown</td><td align="center">没有连接设备</td></tr></tbody></table><h3 id="adb安装apk文件"><a href="#adb安装apk文件" class="headerlink" title="adb安装apk文件"></a>adb安装apk文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb install apk地址</span><br></pre></td></tr></table></figure><h3 id="adb-抓取日志"><a href="#adb-抓取日志" class="headerlink" title="adb 抓取日志"></a>adb 抓取日志</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb logcat</span><br></pre></td></tr></table></figure><p><code>ctrl+c</code>结束查看，可查看手机四个缓冲区日志，包括radio、system、main、event。</p><table><thead><tr><th align="center">缓冲区</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">radio</td><td align="center">存放通信的日志，比如通话短信</td></tr><tr><td align="center">system</td><td align="center">系统组件日志</td></tr><tr><td align="center">main</td><td align="center">手机的应用软件的日志</td></tr><tr><td align="center">event</td><td align="center">手机按键输出等事件日志</td></tr></tbody></table><p>不指定缓冲区的话，默认抓取system和main。<br>要指定缓冲区的话，命令如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb logcat -b 缓冲区</span><br></pre></td></tr></table></figure><p>清理日志信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb logcat -c</span><br></pre></td></tr></table></figure><p>将日志信息输出到指定文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb logcat -b event &gt; E:\log.txt</span><br></pre></td></tr></table></figure><p>logcat是实时的，即在输出日志时操作软件，也可以实时更新日志。<br>日志文件查看：</p><table><thead><tr><th align="center">选项</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">D</td><td align="center">debug</td></tr><tr><td align="center">I</td><td align="center">info</td></tr><tr><td align="center">E</td><td align="center">error</td></tr><tr><td align="center">W</td><td align="center">warm</td></tr></tbody></table><p>只输出错误信息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb logcat *:E</span><br></pre></td></tr></table></figure><h3 id="adb通过WLAN连接到设备"><a href="#adb通过WLAN连接到设备" class="headerlink" title="adb通过WLAN连接到设备"></a>adb通过WLAN连接到设备</h3><ol><li><p>adb安装在pc电脑上，电脑与手机处于同一WLAN下，打开手机的<code>开发者选项</code>和<code>usb调试模式</code>，以下步骤用的是红米note8。</p></li><li><p>使用 USB 数据线将手机连接到电脑。</p></li><li><p>设置目标设备以监听端口 5555 上的 TCP/IP 连接。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb tcpip 5555</span><br></pre></td></tr></table></figure></li><li><p>断开数据线连接</p></li><li><p>找到设备的IP地址</p></li><li><p>通过IP地址连接到设备</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb connect IP地址:5555</span><br></pre></td></tr></table></figure></li><li><p>确认连接</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb devices</span><br></pre></td></tr></table></figure></li><li><p>如果 adb 连接断开：<br>(1) 确保电脑仍与 Android 设备连接到同一个 WLAN 网络。<br>(2) 通过再次执行 adb connect 步骤重新连接。<br>(3) 如果上述操作未解决问题，重置 adb ：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb kill-server</span><br></pre></td></tr></table></figure></li></ol><p>然后重头操作。</p><h3 id="adb帮助文档"><a href="#adb帮助文档" class="headerlink" title="adb帮助文档"></a>adb帮助文档</h3><p><a href="https://developer.android.google.cn/studio/command-line/adb" target="_blank" rel="noopener">https://developer.android.google.cn/studio/command-line/adb</a></p>]]></content>
      
      
      <categories>
          
          <category> 软件测试工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> adb </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
